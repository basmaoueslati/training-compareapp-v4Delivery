pipeline {
    agent any
    stages {
        //Continuous Integration
        stage('Build') {
            steps {
                sh 'mvn clean package -DskipTests=true'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Docker Build&Push') {
            steps {
                withDockerRegistry(credentialsId: 'docker', url: "") {
                    sh 'docker build -t basmaoueslati/compare-appf25 .'
                    sh 'docker push basmaoueslati/compare-appf25'
                }
            }
        }
        stage('Clean Old Docker Images on Local') {
            steps {
                echo '___Cleaning up unused Docker images___'
                sh 'docker image prune -f'

                sh '''
                docker images --filter=reference='basmaoueslati/compare-appf25*' --format '{{.ID}} {{.Repository}}:{{.Tag}}' \
                  | awk '{print $1}' \
                  | xargs -r docker rmi -f
                '''
            }
        }
        stage('Clean Old Docker Images on Remote') {
            steps {
                echo '___Cleaning up old Docker images on remote server___'
                sh '''
                IMAGE_IDS=$(docker -H ssh://ubuntu@13.38.26.14 images --filter=reference='basmaoueslati/compare-appf25*' --format '{{.ID}}')
        
                for IMAGE_ID in $IMAGE_IDS; do
                    echo "Processing image ID: $IMAGE_ID"
        
                    # Get containers based on the image
                    CONTAINERS=$(docker -H ssh://ubuntu@13.38.26.14 ps -a -q --filter ancestor=$IMAGE_ID)
        
                    if [ -n "$CONTAINERS" ]; then
                        echo "Stopping and removing containers using image $IMAGE_ID"
                        docker -H ssh://ubuntu@13.38.26.14 rm -f $CONTAINERS
                    fi
        
                    # Attempt to remove the image
                    echo "Removing image $IMAGE_ID"
                    docker -H ssh://ubuntu@13.38.26.14 rmi -f $IMAGE_ID || echo "Could not remove image $IMAGE_ID"
                done
        
                echo "Pruning dangling images"
                docker -H ssh://ubuntu@13.38.26.14 image prune -f
                '''
            }
        }
//deployment continue
        stage('Run Ansible Playbook') {
            steps {            
                sh 'ansible-playbook -i inventory.ini playbook.yml'
            
        }
    }
}
}
